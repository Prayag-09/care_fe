import { BLOOD_GROUP_CHOICES, GENDER_TYPES, GENDERS } from "@/common/constants";
import BackButton from "@/components/Common/BackButton";
import { DateTimeInput } from "@/components/Common/DateTimeInput";
import Loading from "@/components/Common/Loading";
import Page from "@/components/Common/Page";
import DuplicatePatientDialog from "@/components/Facility/DuplicatePatientDialog";
import { TagSelectorPopover } from "@/components/Tags/TagAssignmentSheet";
import {
  Accordion,
  AccordionContent,
  AccordionItem,
  AccordionTrigger,
} from "@/components/ui/accordion";
import { Button } from "@/components/ui/button";
import { Checkbox } from "@/components/ui/checkbox";
import {
  Form,
  FormControl,
  FormDescription,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { PhoneInput } from "@/components/ui/phone-input";
import RadioInput from "@/components/ui/RadioInput";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { Tabs, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Textarea } from "@/components/ui/textarea";
import useAppHistory from "@/hooks/useAppHistory";
import { useFacilityShortcuts } from "@/hooks/useFacilityShortcuts";
import { tzAwareDateTime } from "@/lib/validators";
import useCurrentFacility from "@/pages/Facility/utils/useCurrentFacility";
import GovtOrganizationSelector from "@/pages/Organization/components/GovtOrganizationSelector";
import {
  BloodGroupChoices,
  PatientIdentifierCreate,
  PatientRead,
} from "@/types/emr/patient/patient";
import patientApi from "@/types/emr/patient/patientApi";
import { TagConfig, TagResource } from "@/types/emr/tagConfig/tagConfig";
import useTagConfigs from "@/types/emr/tagConfig/useTagConfig";
import { FacilityRead } from "@/types/facility/facility";
import { Organization } from "@/types/organization/organization";
import organizationApi from "@/types/organization/organizationApi";
import { PatientIdentifierConfig } from "@/types/patient/patientIdentifierConfig/patientIdentifierConfig";
import { ShortcutBadge } from "@/Utils/keyboardShortcutComponents";
import mutate from "@/Utils/request/mutate";
import query from "@/Utils/request/query";
import validators from "@/Utils/validators";
import careConfig from "@careConfig";
import { zodResolver } from "@hookform/resolvers/zod";
import { useMutation, useQuery } from "@tanstack/react-query";
import { format, isBefore, isFuture, subYears } from "date-fns";
import { TFunction } from "i18next";
import { isValidPhoneNumber } from "libphonenumber-js";
import { ArrowLeft, CheckIcon } from "lucide-react";
import { navigate, useNavigationPrompt, useQueryParams } from "raviger";
import { useEffect, useState } from "react";
import { useForm, UseFormReturn } from "react-hook-form";
import { useTranslation } from "react-i18next";
import { toast } from "sonner";
import { z } from "zod";

export const PatientRegistration = ({ patientId }: { patientId?: string }) => {
  useFacilityShortcuts();
  const { t } = useTranslation();
  const { goBack } = useAppHistory();
  const { facility, facilityId } = useCurrentFacility();
  const [{ phone_number }] = useQueryParams();

  const [suppressDuplicateWarning, setSuppressDuplicateWarning] =
    useState(!!patientId);

  const quickRegistration =
    careConfig.patientRegistration.minimalPatientRegistration;

  const form = useForm({
    resolver: zodResolver(getFormSchema(t)),
    mode: "onSubmit",
    defaultValues: {
      is_deceased: false,
      deceased_datetime: null,
      phone_number: phone_number || "",
      emergency_phone_number: phone_number || "",
      emergency_phone_number_same_as_phone_number: true,
      age_or_dob: "dob",
      permanent_address_same_as_address: true,
      required_identifiers: [],
      optional_identifiers: [],
      autogenerated_identifiers: [],
      tags: [],
      _selected_levels: [],
    },
  });

  const patientQuery = useQuery({
    queryKey: ["patient", patientId],
    queryFn: query(patientApi.getPatient, {
      pathParams: { id: patientId || "" },
    }),
    enabled: !!patientId,
  });

  const defaultGeoOrgId = careConfig.patientRegistration.defaultGeoOrganization;

  const { data: defaultGeoOrg } = useQuery({
    queryKey: ["organization", defaultGeoOrgId],
    queryFn: query(organizationApi.get, {
      pathParams: { id: defaultGeoOrgId },
    }),
    enabled: !!defaultGeoOrgId,
  });

  useEffect(() => {
    if (!facility) {
      return;
    }

    if (!patientId && defaultGeoOrgId && !defaultGeoOrg) {
      return;
    }

    const data = patientQuery.data;

    // Default values for new patient
    if (!data) {
      const getValue = ({ id }: { id: string }) => ({ config: id, value: "" });
      form.setValue(
        "required_identifiers",
        getRequiredIdentifierConfigs(facility).map(getValue),
      );
      form.setValue(
        "optional_identifiers",
        getOptionalIdentifierConfigs(facility).map(getValue),
      );
      form.setValue(
        "autogenerated_identifiers",
        getAutogeneratedIdentifierConfigs(facility).map(getValue),
      );
      form.setValue("geo_organization", defaultGeoOrgId);
      form.setValue("_selected_levels", [defaultGeoOrg!]);
      return;
    }

    const getIdentifier = ({ id }: PatientIdentifierConfig) => {
      const identifier = data.instance_identifiers.find(
        (i) => i.config.id === id,
      );
      return {
        config: id,
        value: identifier?.value,
      };
    };

    // Reset the form with the patient data
    form.reset({
      name: data.name || "",
      phone_number: data.phone_number || "",
      emergency_phone_number: data.emergency_phone_number || "",
      emergency_phone_number_same_as_phone_number:
        data.phone_number === data.emergency_phone_number,
      gender: data.gender as (typeof GENDERS)[number],
      age_or_dob: data.date_of_birth ? "dob" : "age",
      date_of_birth: data.date_of_birth || undefined,
      age:
        !data.date_of_birth && data.year_of_birth
          ? new Date().getFullYear() - data.year_of_birth
          : undefined,
      blood_group: data.blood_group || undefined,
      tags: [], // This is only used for create patient

      address: data.address || "",
      permanent_address: data.permanent_address || "",
      permanent_address_same_as_address:
        data.address === data.permanent_address,
      geo_organization: data.geo_organization.id,
      pincode: data.pincode || undefined,

      is_deceased: !!data.deceased_datetime,
      deceased_datetime: data.deceased_datetime || null,

      required_identifiers:
        getRequiredIdentifierConfigs(facility).map(getIdentifier),
      optional_identifiers:
        getOptionalIdentifierConfigs(facility).map(getIdentifier),
      autogenerated_identifiers:
        getAutogeneratedIdentifierConfigs(facility).map(getIdentifier),

      _selected_levels: [data.geo_organization],
    });

    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [patientQuery.data, facility, defaultGeoOrg]);

  const phoneNumber = form.watch("phone_number");
  const patientPhoneSearch = useQuery({
    queryKey: ["patients", "phone-number", phoneNumber],
    queryFn: query.debounced(patientApi.searchPatient, {
      body: { phone_number: phoneNumber },
    }),
    enabled: isValidPhoneNumber(phoneNumber),
  });

  const duplicatePatients = patientPhoneSearch.data?.results.filter(
    (p) => p.id !== patientId,
  );

  const { mutate: createPatient, isPending: isCreatingPatient } = useMutation({
    mutationFn: mutate(patientApi.addPatient),
    onSuccess: (resp: PatientRead) => {
      toast.success(t("patient_registration_success"));
      // Lets navigate the user to the verify page as the patient is not accessible to the user yet
      navigate(`/facility/${facilityId}/patients/verify`, {
        query: {
          phone_number: resp.phone_number,
          year_of_birth: resp.year_of_birth,
          partial_id: resp?.id?.slice(0, 5),
        },
      });
    },
  });

  const { mutate: updatePatient, isPending: isUpdatingPatient } = useMutation({
    mutationFn: mutate(patientApi.updatePatient, {
      pathParams: { id: patientId || "" },
    }),
    onSuccess: () => {
      toast.success(t("patient_update_success"));
      goBack();
    },
  });

  const isPending = isCreatingPatient || isUpdatingPatient;

  const showDuplicate =
    !patientPhoneSearch.isLoading &&
    !!duplicatePatients?.length &&
    !!isValidPhoneNumber(phoneNumber) &&
    !suppressDuplicateWarning;

  useNavigationPrompt(
    form.formState.isDirty && !isPending && !showDuplicate,
    t("unsaved_changes"),
  );

  if (patientId && patientQuery.isLoading) {
    return <Loading />;
  }

  function onSubmit(values: z.infer<ReturnType<typeof getFormSchema>>) {
    if (!facility) {
      return;
    }

    const basePayload = {
      ...values,

      age: values.age_or_dob === "dob" ? undefined : values.age || undefined,
      date_of_birth:
        values.age_or_dob === "dob"
          ? values.date_of_birth || undefined
          : undefined,

      emergency_phone_number: values.emergency_phone_number_same_as_phone_number
        ? values.phone_number
        : values.emergency_phone_number,

      permanent_address: values.permanent_address_same_as_address
        ? values.address
        : values.permanent_address,
      pincode: values.pincode,

      deceased_datetime: values.is_deceased ? values.deceased_datetime : null,

      identifiers: getEditableIdentifiers(
        [
          ...values.required_identifiers,
          ...values.optional_identifiers,
          ...values.autogenerated_identifiers,
        ],
        facility,
      ),
    };

    if (!patientId) {
      createPatient({
        ...basePayload,
        facility: facilityId,
        tags: values.tags,
      });
    } else {
      updatePatient(basePayload);
    }
  }

  const pageTitle = !patientId
    ? t("register_new_patient")
    : t("update_patient_details");

  return (
    <Page title={pageTitle} hideTitleOnPage>
      <div className="flex flex-col gap-4 max-w-2xl mx-auto">
        <div>
          <BackButton data-shortcut-id="go-back">
            <ArrowLeft />
            {t("back")}
          </BackButton>
        </div>
        <div className="pb-4 mb-2 border-b border-gray-200">
          <div className="flex flex-col">
            <h4 className="font-semibold">{pageTitle}</h4>
            {!patientId && (
              <span className="text-sm text-gray-700">
                {t("patient_create_description")}
              </span>
            )}
          </div>
        </div>

        <Form {...form}>
          <form onSubmit={form.handleSubmit(onSubmit)}>
            <Accordion
              type="multiple"
              className="flex flex-col gap-6"
              defaultValue={
                quickRegistration
                  ? ["patient-basics"]
                  : ["patient-basics", "additional-details"]
              }
            >
              <AccordionItem
                value="patient-basics"
                className="bg-white flex flex-col gap-4 p-6 shadow rounded-md"
              >
                <AccordionTrigger className="flex justify-between">
                  <div className="flex gap-3 items-center w-full">
                    <h5 className="text-lg font-semibold">
                      1: {t("patient_basics")}
                    </h5>
                    {/* TODO: add progress bar */}
                  </div>
                </AccordionTrigger>
                <AccordionContent className="px-1 flex flex-col gap-6">
                  <PatientBasicsContent form={form} isCreate={!patientId} />
                </AccordionContent>
              </AccordionItem>
              <AccordionItem
                value="additional-details"
                className="bg-white flex flex-col gap-4 p-6 shadow rounded-md"
              >
                <AccordionTrigger className="flex justify-between">
                  <div className="flex gap-3 items-center w-full">
                    <h5 className="text-lg font-semibold">
                      2: {t("additional_details")}{" "}
                      {quickRegistration && `(${t("optional")})`}
                    </h5>
                    {/* TODO: add progress bar */}
                  </div>
                </AccordionTrigger>
                <AccordionContent className="px-1 flex flex-col gap-6">
                  <AdditionalDetailsContent form={form} />
                </AccordionContent>
              </AccordionItem>
            </Accordion>
            <div className="w-full border-t border-gray-200 py-6 mt-6">
              <div className="max-w-2xl mx-auto flex justify-end">
                <Button
                  variant="primary_gradient"
                  data-shortcut-id="submit-action"
                  // TODO: disable button if basic info not fille
                >
                  <CheckIcon />
                  {patientId ? t("update") : t("register_patient")}
                  <ShortcutBadge
                    actionId="submit-action"
                    className="bg-gray-200"
                  />
                </Button>
              </div>
            </div>
          </form>
        </Form>
      </div>

      {showDuplicate && (
        <DuplicatePatientDialog
          open={showDuplicate}
          patientList={duplicatePatients}
          onTransfer={() =>
            navigate(`/facility/${facilityId}/patients`, {
              query: { phone_number: form.getValues("phone_number") },
            })
          }
          onOpenChange={(open) => {
            if (!open) {
              setSuppressDuplicateWarning(true);
            }
          }}
        />
      )}
    </Page>
  );
};

const PatientBasicsContent = ({
  form,
  isCreate,
}: {
  form: UseFormReturn<z.infer<ReturnType<typeof getFormSchema>>>;
  isCreate: boolean;
}) => {
  const { t } = useTranslation();
  const { facilityId, facility } = useCurrentFacility();

  const tagIds = form.watch("tags") || [];
  const selectedTags = useTagConfigs({ ids: tagIds, facilityId })
    .map(({ data }) => data)
    .filter(Boolean) as TagConfig[];

  return (
    <>
      <FormField
        control={form.control}
        name="name"
        render={({ field }) => (
          <FormItem>
            <FormLabel aria-required>{t("name")}</FormLabel>
            <FormControl>
              <Input
                autoFocus
                tabIndex={0}
                placeholder={t("type_name")}
                {...field}
              />
            </FormControl>
            <FormMessage />
          </FormItem>
        )}
      />

      <div className="flex flex-col gap-4">
        <FormField
          control={form.control}
          name="phone_number"
          render={({ field }) => (
            <FormItem>
              <FormLabel aria-required>{t("phone_number")}</FormLabel>
              <FormControl>
                <PhoneInput
                  {...field}
                  placeholder={t("enter_phone_number")}
                  onChange={(value) => {
                    field.onChange(value);
                    if (
                      form.getValues(
                        "emergency_phone_number_same_as_phone_number",
                      )
                    ) {
                      form.setValue("emergency_phone_number", value || "", {
                        shouldDirty: true,
                      });
                    }
                  }}
                />
              </FormControl>
              <FormMessage />
            </FormItem>
          )}
        />
        <FormField
          control={form.control}
          name="emergency_phone_number_same_as_phone_number"
          render={({ field }) => (
            <FormItem className="flex items-center gap-2">
              <FormControl>
                <Checkbox
                  checked={!field.value}
                  onCheckedChange={(value) => field.onChange(!value)}
                />
              </FormControl>
              <FormLabel>
                {t("use_different_emergency_contact_number")}
              </FormLabel>
              <FormMessage />
            </FormItem>
          )}
        />
      </div>

      {!form.watch("emergency_phone_number_same_as_phone_number") && (
        <FormField
          control={form.control}
          name="emergency_phone_number"
          render={({ field }) => (
            <FormItem>
              <FormLabel aria-required>{t("emergency_phone_number")}</FormLabel>
              <FormControl>
                <PhoneInput {...field} placeholder={t("enter_phone_number")} />
              </FormControl>
              <FormMessage />
            </FormItem>
          )}
        />
      )}

      <FormField
        control={form.control}
        name="gender"
        render={({ field }) => (
          <FormItem>
            <FormLabel aria-required>{t("sex")}</FormLabel>
            <FormControl>
              <RadioInput
                {...field}
                onValueChange={field.onChange}
                value={field.value ?? undefined}
                options={GENDER_TYPES.map((g) => ({
                  value: g.id,
                  label: t(`GENDER__${g.id}`),
                }))}
                required={true}
              />
            </FormControl>
            <FormMessage />
          </FormItem>
        )}
      />

      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <FormField
          control={form.control}
          name="age_or_dob"
          render={({ field }) => (
            <FormItem>
              <FormLabel aria-required>{t("date_of_birth_or_age")}</FormLabel>
              <div className="flex gap-1 items-start">
                <Tabs value={field.value} onValueChange={field.onChange}>
                  <TabsList className="mt-0.25">
                    <TabsTrigger value="dob">{t("date")}</TabsTrigger>
                    <TabsTrigger value="age">{t("age")}</TabsTrigger>
                  </TabsList>
                </Tabs>
                {field.value === "dob" && (
                  <FormField
                    control={form.control}
                    name="date_of_birth"
                    render={({ field }) => (
                      <FormItem className="w-full">
                        <FormControl>
                          <Input
                            {...field}
                            type="date"
                            max={format(new Date(), "yyyy-MM-dd")}
                            value={field.value ?? ""}
                            onChange={(e) => {
                              field.onChange(e.target.value || null);
                            }}
                          />
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                )}
                {field.value === "age" && (
                  <FormField
                    control={form.control}
                    name="age"
                    render={({ field }) => (
                      <FormItem className="w-full">
                        <FormControl>
                          <Input
                            {...field}
                            type="number"
                            inputMode="numeric"
                            pattern="[0-9]*"
                            placeholder={t("age")}
                            min={1}
                            max={120}
                            value={field.value ?? ""}
                            onChange={(e) => {
                              field.onChange(
                                e.target.value ? Number(e.target.value) : null,
                              );
                            }}
                          />
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                )}
              </div>
            </FormItem>
          )}
        />
        <FormField
          control={form.control}
          name="blood_group"
          render={({ field }) => (
            <FormItem>
              <FormLabel>{t("blood_group")}</FormLabel>
              <Select
                {...field}
                onValueChange={field.onChange}
                defaultValue={field.value}
              >
                <FormControl>
                  <SelectTrigger ref={field.ref}>
                    <SelectValue placeholder={t("select_blood_group")} />
                  </SelectTrigger>
                </FormControl>
                <SelectContent>
                  {BLOOD_GROUP_CHOICES.map((bg) => (
                    <SelectItem key={bg.id} value={bg.id}>
                      {bg.text}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
              <FormMessage />
            </FormItem>
          )}
        />
      </div>

      {facility &&
        getRequiredIdentifierConfigs(facility).map(({ id, config }, idx) => (
          <FormField
            key={id}
            control={form.control}
            name={`required_identifiers.${idx}.value`}
            render={({ field }) => (
              <FormItem>
                <FormLabel aria-required>{config.display}</FormLabel>
                <FormDescription>{config.description}</FormDescription>
                <FormControl>
                  <Input {...field} placeholder={t("enter_identifier_value")} />
                </FormControl>
                <FormMessage />
              </FormItem>
            )}
          />
        ))}

      {/* Tag Selector (only for create) */}
      {isCreate && (
        <FormField
          control={form.control}
          name="tags"
          render={({ field }) => (
            <FormItem>
              <FormLabel>
                {t("patient_tags")}{" "}
                <span className="text-gray-500 text-sm italic">
                  ({t("optional")})
                </span>
              </FormLabel>
              <FormControl>
                <TagSelectorPopover
                  selected={selectedTags}
                  onChange={(tags) => {
                    field.onChange(tags.map((tag) => tag.id));
                  }}
                  resource={TagResource.PATIENT}
                />
              </FormControl>
              <FormMessage />
            </FormItem>
          )}
        />
      )}
    </>
  );
};

const AdditionalDetailsContent = ({
  form,
}: {
  form: UseFormReturn<z.infer<ReturnType<typeof getFormSchema>>>;
}) => {
  const { t } = useTranslation();
  const { facility } = useCurrentFacility();
  const {
    patientRegistration: { minGeoOrganizationLevelsRequired },
  } = careConfig;
  const quickRegistration =
    careConfig.patientRegistration.minimalPatientRegistration;

  return (
    <>
      <div className="flex flex-col gap-4">
        <FormField
          control={form.control}
          name="address"
          render={({ field }) => (
            <FormItem>
              <FormLabel aria-required={!quickRegistration}>
                {t("address")}
              </FormLabel>
              <FormControl>
                <Textarea
                  {...field}
                  placeholder={t("type_address")}
                  onChange={(e) => {
                    field.onChange(e);
                    if (form.getValues("permanent_address_same_as_address")) {
                      form.setValue("permanent_address", e.target.value, {
                        shouldDirty: true,
                      });
                    }
                  }}
                />
              </FormControl>
              <FormMessage />
            </FormItem>
          )}
        />
        <FormField
          control={form.control}
          name="permanent_address_same_as_address"
          render={({ field }) => (
            <FormItem className="flex items-center gap-2">
              <FormControl>
                <Checkbox
                  checked={!field.value}
                  onCheckedChange={(value) => field.onChange(!value)}
                />
              </FormControl>
              <FormLabel>
                {t("permanent_address_is_different_from_current_address")}
              </FormLabel>
            </FormItem>
          )}
        />
      </div>

      {!form.watch("permanent_address_same_as_address") && (
        <FormField
          control={form.control}
          name="permanent_address"
          render={({ field }) => (
            <FormItem>
              <FormLabel aria-required={!quickRegistration}>
                {t("permanent_address")}
              </FormLabel>
              <FormControl>
                <Textarea {...field} placeholder={t("type_address")} />
              </FormControl>
              <FormMessage />
            </FormItem>
          )}
        />
      )}

      <FormField
        control={form.control}
        name="pincode"
        render={({ field }) => (
          <FormItem>
            <FormLabel aria-required={!quickRegistration}>
              {t("pincode")}
            </FormLabel>
            <FormControl>
              <Input
                {...field}
                placeholder={t("enter_pincode")}
                onChange={(e) => {
                  const value = e.target.value
                    ? Number(e.target.value)
                    : undefined;
                  field.onChange(value);
                }}
                type="number"
                inputMode="numeric"
                pattern="[0-9]*"
              />
            </FormControl>
            <FormMessage />
          </FormItem>
        )}
      />

      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
        <FormField
          control={form.control}
          name="geo_organization"
          render={({ field }) => (
            <FormItem className="contents">
              <FormControl>
                <GovtOrganizationSelector
                  {...field}
                  required={minGeoOrganizationLevelsRequired == null}
                  requiredDepth={minGeoOrganizationLevelsRequired}
                  selected={form.watch("_selected_levels")}
                  value={form.watch("geo_organization")}
                  onChange={field.onChange}
                />
              </FormControl>
              <FormMessage />
            </FormItem>
          )}
        />
      </div>

      {facility &&
        getOptionalIdentifierConfigs(facility).map(({ id, config }, idx) => (
          <FormField
            key={id}
            control={form.control}
            name={`optional_identifiers.${idx}.value`}
            render={({ field }) => (
              <FormItem>
                <FormLabel>{config.display}</FormLabel>
                <FormDescription>{config.description}</FormDescription>
                <FormControl>
                  <Input {...field} placeholder={t("enter_identifier_value")} />
                </FormControl>
                <FormMessage />
              </FormItem>
            )}
          />
        ))}

      <div className="flex items-center mb-4 bg-red-50 p-4 rounded-md border border-red-200">
        <div className="flex flex-col gap-2">
          <p className="text-sm font-medium text-black">
            {t("deceased_status")}
          </p>
          <div className="flex items-start gap-2">
            <Checkbox
              className="mt-2"
              checked={form.watch("is_deceased")}
              onCheckedChange={(checked) => {
                form.setValue("is_deceased", !!checked);
              }}
            />
            <div className="flex flex-col">
              <span className="text-sm font-medium text-black">
                {t("mark_as_deceased")}
              </span>
              <p className="text-sm text-gray-700">
                {t("use_only_if_patient_has_passed_away_before_registration")}
              </p>
            </div>
          </div>
          {form.watch("is_deceased") && (
            <FormField
              control={form.control}
              name="deceased_datetime"
              render={({ field }) => (
                <FormItem className="w-full mt-2">
                  <FormLabel>{t("date_and_time_of_death")}</FormLabel>
                  <FormControl>
                    <DateTimeInput
                      id="death-datetime"
                      data-cy="death-datetime-input"
                      value={field.value ?? ""}
                      onDateChange={field.onChange}
                      max={format(new Date(), "yyyy-MM-dd'T'HH:mm")}
                    />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
          )}
        </div>
      </div>

      {facility &&
        getAutogeneratedIdentifierConfigs(facility).map(
          ({ id, config }, idx) => (
            <FormField
              key={id}
              control={form.control}
              name={`autogenerated_identifiers.${idx}.config`}
              render={({ field }) => (
                <FormItem>
                  <FormLabel>{config.display}</FormLabel>
                  <FormDescription>{config.description}</FormDescription>
                  <FormControl>
                    <Input
                      {...field}
                      placeholder={t("identifier_value_autogenerated")}
                      disabled
                    />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
          ),
        )}
    </>
  );
};

const getRequiredIdentifierConfigs = (facility: FacilityRead) => {
  const configs = facility.patient_instance_identifier_configs;
  return configs.filter(({ config }) => {
    const isAutogenerated = !!config.default_value;
    const isRequired = config.required && !isAutogenerated;
    return isRequired;
  });
};

const getOptionalIdentifierConfigs = (facility: FacilityRead) => {
  const configs = facility.patient_instance_identifier_configs;
  return configs.filter(({ config }) => {
    const isAutogenerated = !!config.default_value;
    const isOptional = !config.required && !isAutogenerated;
    return isOptional;
  });
};

const getAutogeneratedIdentifierConfigs = (facility: FacilityRead) => {
  const configs = facility.patient_instance_identifier_configs;
  return configs.filter(({ config }) => {
    const isAutogenerated = !!config.default_value;
    return isAutogenerated;
  });
};

const geoOrgValidator = (t: TFunction) => {
  const requiredLevels =
    careConfig.patientRegistration.minGeoOrganizationLevelsRequired;

  if (!requiredLevels) {
    return z.string().uuid({ message: t("geo_organization_is_required") });
  }

  return z.string().uuid({
    message: t("govt_organization_required_depth_validation", {
      depth: requiredLevels,
    }),
  });
};

const getFormSchema = (t: TFunction) => {
  const isQuick = careConfig.patientRegistration.minimalPatientRegistration;

  return z
    .object({
      // Patient Basics
      name: z.string().trim().nonempty(t("field_required")),
      phone_number: validators().phoneNumber.required,
      emergency_phone_number: validators().phoneNumber.optional,
      emergency_phone_number_same_as_phone_number: z.boolean(),
      gender: z.enum(GENDERS, { required_error: t("field_required") }),
      age_or_dob: z.enum(["dob", "age"]),
      date_of_birth: z
        .string()
        .date()
        .refine((date) => !isFuture(date), t("date_cannot_be_future"))
        .optional()
        .nullable(),
      age: validators().age.optional().nullable(),
      blood_group: z.nativeEnum(BloodGroupChoices).optional(),
      tags: z.array(z.string()),

      // Fields that would be required only if quick registration is not enabled
      address: isQuick
        ? z.string().trim().optional()
        : z.string().trim().nonempty(t("field_required")),
      permanent_address: isQuick
        ? z.string().trim().optional()
        : z.string().trim().nonempty(t("field_required")),
      permanent_address_same_as_address: z.boolean(),
      geo_organization: geoOrgValidator(t),
      pincode: isQuick ? validators().pincode.optional() : validators().pincode,

      is_deceased: z.boolean(),
      deceased_datetime: tzAwareDateTime.optional().nullable(),

      // Identifier related fields
      required_identifiers: z.array(
        z.object({
          config: z.string().uuid(),
          value: z.string().nonempty(t("field_required")),
        }),
      ),
      optional_identifiers: z.array(
        z.object({
          config: z.string().uuid(),
          value: z.string().optional(),
        }),
      ),
      autogenerated_identifiers: z.array(
        z.object({ config: z.string().uuid() }),
      ),

      // Meta fields used for internal state management
      _selected_levels: z.array(z.custom<Organization>()),
    })
    .superRefine((data, ctx) => {
      // Validate the date of birth / age.
      if (data.age_or_dob === "dob" && !data.date_of_birth) {
        ctx.addIssue({
          code: z.ZodIssueCode.custom,
          message: t("field_required"),
          path: ["date_of_birth"],
        });
      }
      if (data.age_or_dob === "age" && !data.age) {
        ctx.addIssue({
          code: z.ZodIssueCode.custom,
          message: t("field_required"),
          path: ["age"],
        });
      }

      // Validate deceased datetime.
      if (data.deceased_datetime && (data.date_of_birth || data.age)) {
        if (
          isBefore(
            data.deceased_datetime ?? "",
            data.date_of_birth || subYears(new Date(), data.age || 0),
          )
        ) {
          ctx.addIssue({
            code: z.ZodIssueCode.custom,
            message: t("death_date_must_be_after_dob"),
            path: ["deceased_datetime"],
          });
        }
      }
    });
};

const getEditableIdentifiers = (
  identifiers: { config: string; value?: string | undefined }[],
  facility: FacilityRead,
) => {
  return identifiers.filter((identifier) => {
    if (!identifier.value) {
      return false;
    }
    const config = facility.patient_instance_identifier_configs.find(
      (c) => c.id === identifier.config,
    );
    return !config?.config.default_value;
  }) as PatientIdentifierCreate[];
};
